/*
 * GPIO_INT.h
 *
 *  Created on: Dec 6, 2019
 *      Author: AhmedShawky
 */

#ifndef GPIO_INT_H_
#define GPIO_INT_H_
#include"std_types.h"

typedef void (*PtrtoFunc)(void);
typedef enum{
	ok,
	nok
}GPIOInt_enumerr;

typedef enum{
    Pending=0xff,
    Inactive=0x00
}Port_IntStatustype;

#define EVENT_FALL_EDGE  0
#define EVENT_RISE_EDGE  1
#define EVENT_BOTH_EDGE  2
#define EVENT_LOW_LEVEL  3
#define EVENT_HIGH_LEVEL 4
#define INT_PRI_HIGHEST              0b000
#define INT_PRI_VERY_HIGH            0b001
#define INT_PRI_HIGH                 0b010
#define INT_PRI_MODERATE_HIGH        0b011
#define INT_PRI_MODERATE             0b100
#define INT_PRI_LOW                  0b101
#define INT_PRI_VERY_LOW             0b110
#define INT_PRI_LOWEST               0b111

GPIOInt_enumerr GPIOInt_ClrInterruptFlag(u8 PinId);
GPIOInt_enumerr GPIOInt_GetInterruptStatus(u8 PinId,Port_IntStatustype *IntStatusPtr);
GPIOInt_enumerr GPIOInt_PinIntInit(u8 PinId,u8 IntEvent,u8 priority);
GPIOInt_enumerr GPIOInt_IntEnable(u8 PinId);
GPIOInt_enumerr GPIOInt_IntDisable(u8 PinId);
GPIOInt_enumerr GPIOInt_SetIntPriority(u8 PortId,u8 Priority);
GPIOInt_enumerr GPIOInt_SetInterruptEvent(u8 PortId,u8 IntEvent,u8 IntMask);   /*the IntMaskStatus is sent to correspond to the pins that I want the action to effect */

void PORTA_ISR(void);
void PORTA_PIN0_ISR(void(*Local_PIN0_ISR1)(void));
void PORTA_PIN1_ISR(void(*Local_PIN1_ISR1)(void));
void PORTA_PIN2_ISR(void(*Local_PIN2_ISR1)(void));
void PORTA_PIN3_ISR(void(*Local_PIN3_ISR1)(void));
void PORTA_PIN4_ISR(void(*Local_PIN4_ISR1)(void));
void PORTA_PIN5_ISR(void(*Local_PIN5_ISR1)(void));
void PORTA_PIN6_ISR(void(*Local_PIN6_ISR1)(void));
void PORTA_PIN7_ISR(void(*Local_PIN7_ISR1)(void));

/*(GPIOIS):THIS SECTION IS FOR INTERRUPT CONFIGURATION, EACH ARRAY INDEX CORRESPONDS TO A PORT'S GPIOIS REGISTER VALUE
IF A BIT IN THE GPIOIS IS SET,THEN THE INTERRUPT DETECTS LEVELS, IF A BIT IS CLEARED THEN IT DETECTS EDGES*/

/*(GPIOIBE):When the corresponding bit in the GPIO Interrupt Sense (GPIOIS) register is set to detect edges, setting a bit in the
GPIOIBE register configures the corresponding pin to detect both rising and falling edges, regardless
of the corresponding bit in the GPIO Interrupt Event (GPIOIEV) register. Clearing
a bit configures the pin to be controlled by the GPIOIEV register.*/

/*(GPIOIEV)Setting a bit in the GPIOIEV register configures the corresponding pin to detect rising edges or high levels,
depending on the corresponding bit value in the GPIO Interrupt Sense (GPIOIS) register.
Clearing a bit configures the pin to detect falling edges or low levels, depending on the corresponding bit value in the GPIOIS*/

/*The GPIOIM register is the interrupt mask register. Setting a bit in the GPIOIM register allows
interrupts that are generated by the corresponding pin to be sent to the interrupt controller on the
combined interrupt signal. Clearing a bit prevents an interrupt on the corresponding pin from being
sent to the interrupt controller. All bits are cleared by a reset.*/

#endif /* GPIO_INT_H_ */
